"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os
import pymysql

pymysql.install_as_MySQLdb()

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=240),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "api",
    "rest_framework",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",       
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allow all only in development

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


CORS_ALLOW_CREDENTIALS = False # Required if using authentication
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"] # Required if using authentication
CORS_ALLOW_HEADERS = ["*"]  # Allow all headers

AUTH_USER_MODEL = 'api.User'  # Replace 'your_app_name' with the actual app name 

# mqtt broker settings
MQTT_BROKER_URL = os.getenv("MQTT_BROKER_URL", "a2v3g8yh48u9ya-ats.iot.ap-south-1.amazonaws.com")  # Replace with your MQTT broker URL
MQTT_BROKER_PORT = int(os.getenv("MQTT_BROKER_PORT", 8883))         # Default MQTT port
MQTT_TOPIC_SUB = os.getenv("MQTT_TOPIC", "esp32/rfid_pub")          # Topic to subscribe
MQTT_TOPIC_PUB = os.getenv("MQTT_TOPIC_PUB", "esp32/rfid_sub")    # Topic to publish
MQTT_CERT_PATH = os.getenv("MQTT_CERT_PATH", './certs/50ed857801d1277db1cf867590deed042ec7c6c6b98792f8afbe4c0cb0df66a1-certificate.pem.crt')  # Path to device certificate
MQTT_KEY_PATH = os.getenv("MQTT_KEY_PATH", './certs/50ed857801d1277db1cf867590deed042ec7c6c6b98792f8afbe4c0cb0df66a1-private.pem.key')  # Path to private key
MQTT_CA_PATH = os.getenv("MQTT_CA_PATH", './certs/AmazonRootCA1.pem')  # Path to Amazon Root CA
MQTT_CLIENT_ID = os.getenv("MQTT_CLIENT_ID", "DjangoBackend")

STATION_MQTT_TOPICS = {
    "500": "esp32/station_500",
    "501": "esp32/station_501",
    "502": "esp32/station_502",
    # Add more mappings as needed
}